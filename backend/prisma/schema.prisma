generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  email     String           @unique
  password  String
  name      String
  role      Role             @default(STAFF)
  phone     String           @unique
  status    StaffStatus      @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  records   DeceasedRecord[] @relation("HandledBy")
}

enum Role {
  ADMIN
  STAFF
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}

model DeceasedRecord {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  dateOfDeath         DateTime
  timeOfDeath         String
  causeOfDeath        String
  gender              Gender
  identificationMarks String?
  personalBelongings  String[]
  status              Status         @default(IN_FACILITY)
  chamber             Chamber?       @relation(fields: [chamberId], references: [id])
  chamberId           String?        @db.ObjectId
  chamberUnitName     String?        @unique
  nextOfKin           NextOfKin[]
  handledBy           User           @relation("HandledBy", fields: [userId], references: [id])
  userId              String         @db.ObjectId
  services            Service[]
  releaseInfo         ReleaseRecord?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@unique([chamberId, chamberUnitName])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  IN_FACILITY
  RELEASED
  PROCESSED
}

model Chamber {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String           @unique
  status           ChamberStatus    @default(AVAILABLE)
  capacity         Int
  currentOccupancy Int              @default(0)
  deceased         DeceasedRecord[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum ChamberStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  OUT_OF_ORDER
}

model NextOfKin {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  relationship String
  phoneNumber  String
  email        String
  address      String
  deceased     DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId   String         @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Service {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  type        ServiceType
  cost        Float
  deceased    DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId  String         @db.ObjectId
  status      ServiceStatus  @default(PENDING)
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

enum ServiceType {
  CARE
  RITUAL
  LOGISTICS
  OTHER
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ReleaseRecord {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  deceased     DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId   String         @unique @db.ObjectId
  releasedTo   String
  relationship String
  releaseDate  DateTime
  documents    String[]
  remarks      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}
