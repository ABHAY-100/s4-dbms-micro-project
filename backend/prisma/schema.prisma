generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  String
  name      String
  role      Role      @default(STAFF)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  records   DeceasedRecord[] @relation("HandledBy")
}

enum Role {
  ADMIN
  STAFF
}

model DeceasedRecord {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  dateOfDeath   DateTime
  timeOfDeath   String
  causeOfDeath  String
  gender        Gender
  identificationMarks String?
  personalBelongings String[]
  status        Status    @default(IN_FACILITY)
  chamber       Chamber?  @relation(fields: [chamberId], references: [id])
  chamberId     String?   @db.ObjectId
  nextOfKin     NextOfKin[]
  handledBy     User      @relation("HandledBy", fields: [userId], references: [id])
  userId        String    @db.ObjectId
  services      Service[]
  releaseInfo   ReleaseRecord?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  IN_FACILITY
  RELEASED
  TRANSFERRED
}

model Chamber {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  number        String    @unique
  temperature   Float
  status        ChamberStatus @default(AVAILABLE)
  capacity      Int
  currentOccupancy Int    @default(0)
  deceased      DeceasedRecord[]
  maintenance   MaintenanceRecord[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ChamberStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  OUT_OF_ORDER
}

model NextOfKin {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  relationship  String
  phoneNumber   String
  email         String?
  address       String
  deceased      DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId    String    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  cost          Float
  deceased      DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId    String    @db.ObjectId
  status        ServiceStatus @default(PENDING)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model ReleaseRecord {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  deceased      DeceasedRecord @relation(fields: [deceasedId], references: [id])
  deceasedId    String    @db.ObjectId @unique
  releasedTo    String
  relationship  String
  releaseDate   DateTime
  documents     String[]
  remarks       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model MaintenanceRecord {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  chamber       Chamber   @relation(fields: [chamberId], references: [id])
  chamberId     String    @db.ObjectId
  description   String
  maintenanceType MaintenanceType
  startDate     DateTime
  endDate       DateTime?
  status        MaintenanceStatus @default(SCHEDULED)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  CLEANING
  INSPECTION
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
